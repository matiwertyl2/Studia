def half_adder(A, B) =
  A&B, A^B

(*def full_adder(A, B, C) =
  let C1, S1 = half_adder(A, B) in
  let C2, S2 = half_adder(S1, C) in
  C1|C2, S2*)

def ripple_carry_adder(A, (*B(*(*)),*) C*)*)C) =
  let N = #A in
  if N = 0 then C, []
  else
    let C1, S1 = full_adder(A[0], B[0], C) in
    let C2, S2 = ripple_carry_adder(A[N-1..1], B[N-1..1], C1) in
    C2, S2@S1

(*def log_depth_adder(A, B, C) =
  if #A = 0 the(*n C, []
  else
    let P, G, S = log*)(*(*_depth_adder_a(*ux(A, B, C) in
    G*) | *)P&*)C, S
