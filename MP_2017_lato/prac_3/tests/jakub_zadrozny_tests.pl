% Definiujemy moduł zawierający testy.
% Należy zmienić nazwę modułu na {imie}_{nazwisko}_tests gdzie za
% {imie} i {nazwisko} należy podstawić odpowiednio swoje imię
% i nazwisko bez wielkich liter oraz znaków diakrytycznych
:- module(jakub_zadrozny_tests, [tests/3]).

% Zbiór faktów definiujących testy
% Należy zdefiniować swoje testy
tests(empty_program, input(""), program([])).
tests(invalid, input("def main()"), no).

tests(custom_no, file('incorrect1.hdml'), no).
tests(operatory_no, file('incorrect2.hdml'), no).
tests(wzorce_no, file('incorrect3.hdml'), no).
tests(komentarze_no, file('incorrect4.hdml'), no).
tests(wybory_bitow_no, input("def f(_) = [][1][1..2][[]..[][1..2]][###[]][][[[[]]]..[[[1+-2]]]]"), no).

tests(alltogehter_no, file('incorrect5.hdml'), no).

tests(srcpos, input("def main(_) = 1"),
  program([def(main, wildcard(file(test, 1, 10, 9, 1)), num(no, 1))])).

tests(adder, file('adder.hdml'), program([def(half_adder,pair(no,var(no,'A'),var(no,'B')),pair(no,op(no,&,var(no,'A'),var(no,'B')),op(no,^,var(no,'A'),var(no,'B')))),def(full_adder,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),let(no,pair(no,var(no,'C1'),var(no,'S1')),call(no,half_adder,pair(no,var(no,'A'),var(no,'B'))),let(no,pair(no,var(no,'C2'),var(no,'S2')),call(no,half_adder,pair(no,var(no,'S1'),var(no,'C'))),pair(no,op(no,'|',var(no,'C1'),var(no,'C2')),var(no,'S2'))))),def(ripple_carry_adder,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),let(no,var(no,'N'),op(no,#,var(no,'A')),if(no,op(no,=,var(no,'N'),num(no,0)),pair(no,var(no,'C'),empty(no)),let(no,pair(no,var(no,'C1'),var(no,'S1')),call(no,full_adder,pair(no,bitsel(no,var(no,'A'),num(no,0)),pair(no,bitsel(no,var(no,'B'),num(no,0)),var(no,'C')))),let(no,pair(no,var(no,'C2'),var(no,'S2')),call(no,ripple_carry_adder,pair(no,bitsel(no,var(no,'A'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),pair(no,bitsel(no,var(no,'B'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),var(no,'C1')))),pair(no,var(no,'C2'),op(no,@,var(no,'S2'),var(no,'S1')))))))),def(log_depth_adder_aux,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),let(no,var(no,'N'),op(no,#,var(no,'A')),if(no,op(no,=,var(no,'N'),num(no,1)),let(no,var(no,'P'),op(no,^,var(no,'A'),var(no,'B')),pair(no,var(no,'P'),pair(no,op(no,&,var(no,'A'),var(no,'B')),op(no,^,var(no,'P'),var(no,'C'))))),let(no,var(no,'H'),op(no,/,var(no,'N'),num(no,2)),let(no,pair(no,var(no,'P1'),pair(no,var(no,'G1'),var(no,'S1'))),call(no,log_depth_adder_aux,pair(no,bitsel(no,var(no,'A'),op(no,-,var(no,'H'),num(no,1)),num(no,0)),pair(no,bitsel(no,var(no,'B'),op(no,-,var(no,'H'),num(no,1)),num(no,0)),var(no,'C')))),let(no,pair(no,var(no,'P2'),pair(no,var(no,'G2'),var(no,'S2'))),call(no,log_depth_adder_aux,pair(no,bitsel(no,var(no,'A'),op(no,-,var(no,'N'),num(no,1)),var(no,'H')),pair(no,bitsel(no,var(no,'B'),op(no,-,var(no,'N'),num(no,1)),var(no,'H')),op(no,'|',var(no,'G1'),op(no,&,var(no,'C'),var(no,'P1')))))),pair(no,op(no,&,var(no,'P1'),var(no,'P2')),pair(no,op(no,'|',var(no,'G2'),op(no,&,var(no,'G1'),var(no,'P2'))),op(no,@,var(no,'S2'),var(no,'S1')))))))))),def(log_depth_adder,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),if(no,op(no,=,op(no,#,var(no,'A')),num(no,0)),pair(no,var(no,'C'),empty(no)),let(no,pair(no,var(no,'P'),pair(no,var(no,'G'),var(no,'S'))),call(no,log_depth_adder_aux,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C')))),pair(no,op(no,'|',var(no,'G'),op(no,&,var(no,'P'),var(no,'C'))),var(no,'S'))))),def(or_of,var(no,'A'),let(no,var(no,'N'),op(no,#,var(no,'A')),if(no,op(no,=,var(no,'N'),num(no,0)),bit(no,num(no,0)),if(no,op(no,=,var(no,'N'),num(no,1)),var(no,'A'),let(no,var(no,'H'),op(no,/,var(no,'N'),num(no,2)),op(no,'|',call(no,or_of,bitsel(no,var(no,'A'),op(no,-,var(no,'H'),num(no,1)),num(no,0))),call(no,or_of,bitsel(no,var(no,'A'),op(no,-,var(no,'N'),num(no,1)),var(no,'H'))))))))),def(main,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),let(no,pair(no,var(no,'C1'),var(no,'S1')),call(no,ripple_carry_adder,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C')))),let(no,pair(no,var(no,'C2'),var(no,'S2')),call(no,log_depth_adder,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C')))),op(no,~,op(no,'|',op(no,^,var(no,'C1'),var(no,'C2')),call(no,or_of,op(no,^,var(no,'S1'),var(no,'S2'))))))))])).

tests(custom, file('correct1.hdml'), program([def(f1,pair(no,var(no,'A'),var(no,'B')),op(no,+,op(no,-,op(no,#,var(no,'A'))),op(no,#,var(no,'B')))),def(f2,pair(no,var(no,'X'),var(no,'Y')),if(no,op(no,>,op(no,#,var(no,'X')),op(no,#,var(no,'Y'))),call(no,f1,pair(no,var(no,'Y'),var(no,'X'))),call(no,f1,pair(no,var(no,'X'),var(no,'Y'))))),def(f3,pair(no,var(no,'X'),pair(no,var(no,'Y'),var(no,'Z'))),let(no,var(no,'A'),op(no,@,var(no,'X'),var(no,'Y')),call(no,f2,pair(no,var(no,'A'),var(no,'Z')))))])).

tests(operatory, file('correct2.hdml'), program([def(f1,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),pair(no,op(no,+,op(no,^,op(no,-,op(no,+,num(no,1),num(no,2)),op(no,*,num(no,3),num(no,4))),num(no,5)),op(no,-,var(no,'A'))),pair(no,op(no,+,num(no,3),op(no,-,num(no,4))),pair(no,op(no,#,op(no,-,var(no,'A'))),pair(no,op(no,-,op(no,+,op(no,+,op(no,+,op(no,+,op(no,+,op(no,+,num(no,1),num(no,2)),num(no,3)),num(no,4)),num(no,5)),num(no,6)),op(no,-,var(no,'A'))),op(no,+,var(no,'B'),var(no,'C'))),op(no,#,op(no,-,op(no,#,op(no,#,op(no,~,op(no,~,op(no,-,op(no,#,op(no,~,op(no,~,var(no,'A'))))))))))))))))])).

tests(wzorce, file('correct3.hdml'), program([def(f1,wildcard(no),num(no,1)),def(f2,var(no,'A'),num(no,1)),def(f3,pair(no,var(no,'A'),pair(no,var(no,'B'),pair(no,var(no,'C'),pair(no,var(no,'D'),var(no,'E'))))),num(no,1)),def(f4,pair(no,pair(no,pair(no,var(no,'A'),var(no,'B')),var(no,'C')),pair(no,var(no,'D'),pair(no,var(no,'E'),pair(no,var(no,'F'),var(no,'G'))))),num(no,1)),def(f5,pair(no,pair(no,pair(no,var(no,'A'),var(no,'B')),var(no,'C')),pair(no,var(no,'D'),pair(no,wildcard(no),pair(no,pair(no,wildcard(no),pair(no,pair(no,var(no,'A'),wildcard(no)),var(no,'R'))),pair(no,wildcard(no),pair(no,var(no,'E'),pair(no,var(no,'F'),var(no,'G')))))))),num(no,1))])).

tests(komentarze1, file('correct4.hdml'), program([def(half_adder,pair(no,var(no,'A'),var(no,'B')),pair(no,op(no,&,var(no,'A'),var(no,'B')),op(no,^,var(no,'A'),var(no,'B')))),def(ripple_carry_adder,pair(no,var(no,'A'),var(no,'C')),let(no,var(no,'N'),op(no,#,var(no,'A')),if(no,op(no,=,var(no,'N'),num(no,0)),pair(no,var(no,'C'),empty(no)),let(no,pair(no,var(no,'C1'),var(no,'S1')),call(no,full_adder,pair(no,bitsel(no,var(no,'A'),num(no,0)),pair(no,bitsel(no,var(no,'B'),num(no,0)),var(no,'C')))),let(no,pair(no,var(no,'C2'),var(no,'S2')),call(no,ripple_carry_adder,pair(no,bitsel(no,var(no,'A'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),pair(no,bitsel(no,var(no,'B'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),var(no,'C1')))),pair(no,var(no,'C2'),op(no,@,var(no,'S2'),var(no,'S1'))))))))])).

tests(komentarze2, file('correct5.hdml'), program([def(half_adder,pair(no,var(no,'A'),var(no,'B')),pair(no,op(no,&,var(no,'A'),var(no,'B')),op(no,^,var(no,'A'),var(no,'B')))),def(ripple_carry_adder,pair(no,var(no,'A'),var(no,'C')),let(no,var(no,'N'),op(no,#,var(no,'A')),if(no,op(no,=,var(no,'N'),num(no,0)),pair(no,var(no,'C'),empty(no)),let(no,pair(no,var(no,'C1'),var(no,'S1')),call(no,full_adder,pair(no,bitsel(no,var(no,'A'),num(no,0)),pair(no,bitsel(no,var(no,'B'),num(no,0)),var(no,'C')))),let(no,pair(no,var(no,'C2'),var(no,'S2')),call(no,ripple_carry_adder,pair(no,bitsel(no,var(no,'A'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),pair(no,bitsel(no,var(no,'B'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),var(no,'C1')))),pair(no,var(no,'C2'),op(no,@,var(no,'S2'),var(no,'S1'))))))))])).

tests(wybory_bitow, input("def f(_) = [][1][1..2][[]..[][1..2]][###[]][[[[]]]..[[[1+-2]]]]"), program([def(f,wildcard(no),bitsel(no,bitsel(no,bitsel(no,bitsel(no,bitsel(no,empty(no),num(no,1)),num(no,1),num(no,2)),empty(no),bitsel(no,empty(no),num(no,1),num(no,2))),op(no,#,op(no,#,op(no,#,empty(no))))),bit(no,bit(no,empty(no))),bit(no,bit(no,bit(no,op(no,+,num(no,1),op(no,-,num(no,2))))))))])).

tests(alltogehter, file('correct6.hdml'), program([def(f1,pair(no,var(no,'A'),var(no,'B')),op(no,+,op(no,-,op(no,#,var(no,'A'))),op(no,#,var(no,'B')))),def(f2,pair(no,var(no,'X'),var(no,'Y')),if(no,op(no,>,op(no,#,var(no,'X')),op(no,#,var(no,'Y'))),call(no,f1,pair(no,var(no,'Y'),var(no,'X'))),call(no,f1,pair(no,var(no,'X'),var(no,'Y'))))),def(f3,pair(no,var(no,'X'),pair(no,var(no,'Y'),var(no,'Z'))),let(no,var(no,'A'),op(no,@,var(no,'X'),var(no,'Y')),call(no,f2,pair(no,var(no,'A'),var(no,'Z'))))),def(f4,pair(no,var(no,'A'),pair(no,var(no,'B'),var(no,'C'))),pair(no,op(no,+,op(no,^,op(no,-,op(no,+,num(no,1),num(no,2)),op(no,*,num(no,3),num(no,4))),num(no,5)),op(no,-,var(no,'A'))),pair(no,op(no,+,num(no,3),op(no,-,num(no,4))),pair(no,op(no,#,op(no,-,var(no,'A'))),pair(no,op(no,-,op(no,+,op(no,+,op(no,+,op(no,+,op(no,+,op(no,+,num(no,1),num(no,2)),num(no,3)),num(no,4)),num(no,5)),num(no,6)),op(no,-,var(no,'A'))),op(no,+,var(no,'B'),var(no,'C'))),op(no,#,op(no,-,op(no,#,op(no,#,op(no,~,op(no,~,op(no,-,op(no,#,op(no,~,op(no,~,var(no,'A')))))))))))))))),def(f5,wildcard(no),num(no,1)),def(f6,var(no,'A'),num(no,1)),def(f7,pair(no,var(no,'A'),pair(no,var(no,'B'),pair(no,var(no,'C'),pair(no,var(no,'D'),var(no,'E'))))),num(no,1)),def(f8,pair(no,pair(no,pair(no,var(no,'A'),var(no,'B')),var(no,'C')),pair(no,var(no,'D'),pair(no,var(no,'E'),pair(no,var(no,'F'),var(no,'G'))))),num(no,1)),def(f9,pair(no,pair(no,pair(no,var(no,'A'),var(no,'B')),var(no,'C')),pair(no,var(no,'D'),pair(no,wildcard(no),pair(no,pair(no,wildcard(no),pair(no,pair(no,var(no,'A'),wildcard(no)),var(no,'R'))),pair(no,wildcard(no),pair(no,var(no,'E'),pair(no,var(no,'F'),var(no,'G')))))))),num(no,1)),def(half_adder,pair(no,var(no,'A'),var(no,'B')),pair(no,op(no,&,var(no,'A'),var(no,'B')),op(no,^,var(no,'A'),var(no,'B')))),def(ripple_carry_adder,pair(no,var(no,'A'),var(no,'C')),let(no,var(no,'N'),op(no,#,var(no,'A')),if(no,op(no,=,var(no,'N'),num(no,0)),pair(no,var(no,'C'),empty(no)),let(no,pair(no,var(no,'C1'),var(no,'S1')),call(no,full_adder,pair(no,bitsel(no,var(no,'A'),num(no,0)),pair(no,bitsel(no,var(no,'B'),num(no,0)),var(no,'C')))),let(no,pair(no,var(no,'C2'),var(no,'S2')),call(no,ripple_carry_adder,pair(no,bitsel(no,var(no,'A'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),pair(no,bitsel(no,var(no,'B'),op(no,-,var(no,'N'),num(no,1)),num(no,1)),var(no,'C1')))),pair(no,var(no,'C2'),op(no,@,var(no,'S2'),var(no,'S1'))))))))])).
